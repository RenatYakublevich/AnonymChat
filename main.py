import logging
import asyncio

#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiogram.utils.exceptions

import sqlite3

#–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
import config
from database import dbworker

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = dbworker('db.db')

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

#–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="all_log.log", level=logging.INFO, format='%(asctime)s - %(levelname)s -%(message)s')
warning_log = logging.getLogger("warning_log")
warning_log.setLevel(logging.WARNING)

fh = logging.FileHandler("warning_log.log")

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)


warning_log.addHandler(fh)


#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'],state='*')
async def start(message : types.Message, state: FSMContext):
    await state.finish()

    button_search = KeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫üîç')

    button_info_project = KeyboardButton('–û –ø—Ä–æ–µ–∫—Ç–µüßë‚Äçüíª')

    rules = KeyboardButton('–ü—Ä–∞–≤–∏–ª–∞üìñ')

    mark_menu = ReplyKeyboardMarkup()

    mark_menu.add(button_search,button_info_project,rules)

    await bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç!\n\n–≠—Ç–æ –ì–æ–º–µ–ª—å—Å–∫–∏–π –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –∫—Ä–æ–ª–æ–≤....\n–∫—Ö–º —à—É—á—É\n\n',reply_markup=mark_menu)


@dp.message_handler(lambda message : message.text == '–û –ø—Ä–æ–µ–∫—Ç–µüßë‚Äçüíª' or message.text == '–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Å' or message.text == '[ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ]',state='*')
async def about_project(message : types.Message):
    if message.text == '–û –ø—Ä–æ–µ–∫—Ç–µüßë‚Äçüíª':
        links = KeyboardButton('–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Å')

        for_developers = KeyboardButton('[ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ]')

        back = KeyboardButton('–ù–∞–∑–∞–¥')

        mark_menu = ReplyKeyboardMarkup()

        mark_menu.add(links,for_developers,back)

        await bot.send_message(message.chat.id,'–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç—É—Çüëá',reply_markup=mark_menu)
    elif message.text == '–í—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Å':
        await message.answer('–ì–ª–∞–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - –Ø–∫—É–±–ª–µ–≤–∏—á –†–µ–Ω–∞—Ç\n–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ - merlinincorp@gmail.com\n\nGithub - https://github.com/RenatYakublevich/AnonymChat')

    elif message.text == '[ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ]':
        await message.answer('–ï—Å–ª–∏ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç–æ —Å–º–µ–ª–æ –∫–æ–Ω—Ç—Ä–∏–±—É—Ç—å–µ –Ω–∞ –≥–∏—Ç–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É - merlinincorp@gmail.com')

@dp.message_handler(commands=['rules'],state='*')
@dp.message_handler(lambda message : message.text == '–ü—Ä–∞–≤–∏–ª–∞üìñ')
async def rules(message : types.Message):
    await message.answer('''üìå–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ @GomelAnonymChatBot\n1. –õ—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤. (–Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤)\n2. –î–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è. ("–¶–ü")\n3. –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ. (Scam)\n4. –õ—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º.\n5. –ü—Ä–æ–¥–∞–∂–∏ —á–µ–≥–æ –ª–∏–±–æ. (–Ω–∞–ø—Ä–∏–º–µ—Ä - –ø—Ä–æ–¥–∞–∂–∞ –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –≤–∏–¥–µ–æ)\n6. –õ—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞—Ä—É—à–∞—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ Telegram.\n7. –û—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n8. –û–±–º–µ–Ω, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±—ã—Ö 18+ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n‚ùå- –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.''')

@dp.message_handler(lambda message: message.text == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫üîç',state='*')
async def search(message : types.Message):
    try:
        if(not db.user_exists(message.from_user.id)): #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            db.add_user(message.from_user.username,message.from_user.id) #–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ —Ç–∞–±–ª–∏—á–∫—É –¥–±

        male = KeyboardButton('–ü–∞—Ä–Ω—è')

        wooman = KeyboardButton('–î–µ–≤—É—à–∫—É')

        back = KeyboardButton('–ù–∞–∑–∞–¥')

        sex_menu = ReplyKeyboardMarkup(one_time_keyboard=True)

        sex_menu.add(male,wooman,back)

        await message.answer('–í—ã–±–µ—Ä–∏ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n–ö–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ?)',reply_markup=sex_menu)
    except Exception as e:
        warning_log.warning(e)

#–∫–ª–∞—Å—Å –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Chating(StatesGroup):
	msg = State()

@dp.message_handler(lambda message: message.text == '–ü–∞—Ä–Ω—è' or message.text == '–î–µ–≤—É—à–∫—É',state='*')
async def chooce_sex(message : types.Message, state: FSMContext):
    ''' –í—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ '''
    try:
        if (not db.queue_exists(message.from_user.id)):
            if message.text == '–ü–∞—Ä–Ω—è':
                db.edit_sex(True,message.from_user.id)
                db.add_to_queue(message.from_user.id,True)
            elif message.text == '–î–µ–≤—É—à–∫—É':
                db.edit_sex(False,message.from_user.id)
                db.add_to_queue(message.from_user.id,False)
            else:
                db.add_to_queue(message.from_user.id,db.get_sex_user(message.from_user.id)[0])
            await message.answer('–ò—â–µ–º –¥–ª—è –≤–∞—Å —á–µ–ª–æ–≤–µ—á–∫–∞..')

        else:
            await message.answer('–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!ü§¨')

        #–∫–Ω–æ–ø–∫–∏
        stop = KeyboardButton('‚ùå–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')

        share_link = KeyboardButton('üèπ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è')

        menu_msg = ReplyKeyboardMarkup()

        menu_msg.add(stop,share_link)

        while True:
            await asyncio.sleep(0.5)
            if db.search(db.get_sex_user(message.from_user.id)[0]) != None: #–µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —é–∑–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏
                try:
                    db.update_connect_with(db.search(db.get_sex_user(message.from_user.id)[0])[0],message.from_user.id) #–æ–±–Ω–æ–≤–ª—è–µ–º —Å –∫–µ–º –æ–±—â–∞–µ—Ç—Å—è —é–∑–µ—Ä
                    db.update_connect_with(message.from_user.id,db.search(db.get_sex_user(message.from_user.id)[0])[0])
                    break
                except Exception as e:
                    print(e)

        while True:
            await asyncio.sleep(0.5)
            if db.select_connect_with(message.from_user.id)[0] != None: #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω–µ–∫—Ç–∏–ª—Å—è
                await bot.send_message(message.from_user.id,'–î–∏–∞–ª–æ–≥ –Ω–∞—á–∞–ª—Å—è!',reply_markup=menu_msg)
                break


        await Chating.msg.set()
        db.delete_from_queue(message.from_user.id) #—É–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        #db.delete_from_queue(db.search(db.get_sex_user(message.from_user.id)[0])[0])

    except Exception as e:
        warning_log.warning(e)





@dp.message_handler(content_types=types.ContentTypes.ANY)
@dp.message_handler(state=Chating.msg)
async def chating(message : types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –≥–¥–µ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–±—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ '''
    try:

        next = KeyboardButton('‚û°Ô∏è–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥')

        back = KeyboardButton('–ù–∞–∑–∞–¥')

        menu_msg_chating = ReplyKeyboardMarkup()

        menu_msg_chating.add(next,back)

        await state.update_data(msg=message.text)

        user_data = await state.get_data()

        if user_data['msg'] == 'üèπ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è':
            await bot.send_message(db.select_connect_with_self(message.from_user.id)[0],'@' + message.from_user.username)
        elif user_data['msg'] == '‚ùå–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥':
            await message.answer('–î–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!',reply_markup=menu_msg_chating)
            await bot.send_message(db.select_connect_with(message.from_user.id)[0],'–î–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!',reply_markup=menu_msg_chating)
            db.update_connect_with(None,db.select_connect_with(message.from_user.id)[0])
            db.update_connect_with(None,message.from_user.id)
        elif user_data['msg'] == '‚û°Ô∏è–°–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥':
            await chooce_sex(message,state)
        elif user_data['msg'] == '–ù–∞–∑–∞–¥':
            await start(message,state)
            await state.finish()

        else:
            await bot.send_message(db.select_connect_with(message.from_user.id)[0],user_data['msg']) #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.log_msg(message.from_user.id,user_data['msg']) #–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–æ–≤ –≤ –±–¥

    except aiogram.utils.exceptions.ChatIdIsEmpty:
        pass
    except aiogram.utils.exceptions.BotBlocked:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —á–∞—Ç –±–æ—Ç–∞!')
        await state.finish()
    except Exception as e:
        warning_log.warning(e)




#—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∑–∞–¥
@dp.message_handler(commands=['back'])
@dp.message_handler(lambda message : message.text == '–ù–∞–∑–∞–¥',state='*')
async def back(message : types.Message, state: FSMContext):
    ''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã back '''
    await state.finish()
    await start(message,state)


#–∞–¥–º–∏–Ω–∫–∞
@dp.message_handler(lambda message: message.text.startswith('/sendmsg_admin'),state='*')
async def admin_send_msg(message : types.Message):
    if message.from_user.id in config.ADMIN_LIST:
        msg = message.text.split(',')
        await bot.send_message(int(msg[1]),'C–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n'  + msg[2])
    else:
        await message.answer('–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–º –∑–∞–ø—Ä–æ—Å–µ —é–∑–µ—Ä–∞
@dp.message_handler()
async def end(message : types.Message):
	'''–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–º–æ–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞'''
	await message.answer('–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å üò≤\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é, —á—Ç–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /start –∏ /help')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True,)
