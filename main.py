import asyncio

#aiogram –∏ –≤—Å—ë —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

#–∫–æ–Ω—Ñ–∏–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
import config
from database import dbworker

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = dbworker('db.db')

#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'],state='*')
async def start(message : types.Message):

    button_search = KeyboardButton('–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫üîç')

    mark_menu = ReplyKeyboardMarkup()

    mark_menu.add(button_search)

    await bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç!\n\n–≠—Ç–æ –ì–æ–º–µ–ª—å—Å–∫–∏–π –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö –∫—Ä–æ–ª–æ–≤....\n–∫—Ö–º —à—É—á—É\n\n',reply_markup=mark_menu)



@dp.message_handler(lambda message: message.text == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫üîç',state='*')
async def search(message : types.Message):
    if(not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.username,message.from_user.id)

    male = KeyboardButton('–ü–∞—Ä–Ω—è')

    wooman = KeyboardButton('–î–µ–≤—É—à–∫—É')

    sex_menu = ReplyKeyboardMarkup()

    sex_menu.add(male,wooman)

    await message.answer('–í—ã–±–µ—Ä–∏ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n–ö–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ?)',reply_markup=sex_menu)


class Chating(StatesGroup):
	msg = State()

@dp.message_handler(lambda message: message.text == '–ü–∞—Ä–Ω—è' or message.text == '–î–µ–≤—É—à–∫—É',state='*')
async def chooce_sex(message : types.Message):
    if message.text == '–ü–∞—Ä–Ω—è':
        db.edit_sex(True,message.from_user.id)
    else:
        db.edit_sex(False,message.from_user.id)

    all_users = db.search(db.get_info_user('sex',message.from_user.id))
    print(all_users)

    await Chating.msg.set()


@dp.message_handler(state=Chating.msg)
async def chating(message : types.Message, state: FSMContext):
    await state.update_data(msg=message.text)

    user_data = await state.get_data()

    await message.answer(user_data['msg'])








executor.start_polling(dp, skip_updates=True)
